package validators

import (
	"unicode"
)

/*
All the joining type classes that are missing from golang's unicode impl

This can be generated with:
curl -o - http://www.unicode.org/Public/8.0.0/ucd/extracted/DerivedJoiningType.txt 2>/dev/null | grep -E '^[0-9A-F]{4,8}' | sed -e 's/;/ ;/'| sort -s -k3,3 | (echo -e "var (\n"; gawk '{if($3 != last) { if(last) { print "\t\t},\n\t}\n"}; print "\tjoiningTable"$3" =       unicode.RangeTable{\n\t\tR16: []unicode.Range16{"; make="makeRange16"} last=$3} /^[0-9A-F]{4}[[:space:]\.]/ {sixteen=1; } /^[0-9A-F]{5,8}[[:space:]\.]/ { if(sixteen) {       sixteen=0; print "\t\t},\n\t\tR32: []unicode.Range32{"; make="makeRange32"; } } {if(index($1,"..")) { n1=substr($1,0,index($1,"..")-1); n2=substr($1,index($1,"..")+2); }     else { n1 = n2 = $1 } print "\t\t\t"make"(0x"n1", 0x"n2")," }'; echo -e "\t\t},\n\t}\n)")  | gofmt

*/

// -------------------- cut here -------------------------
var (
	joiningTableC = unicode.RangeTable{
		R16: []unicode.Range16{
			makeRange16(0x0640, 0x0640),
			makeRange16(0x07FA, 0x07FA),
			makeRange16(0x180A, 0x180A),
			makeRange16(0x200D, 0x200D),
		},
	}

	joiningTableD = unicode.RangeTable{
		R16: []unicode.Range16{
			makeRange16(0x0620, 0x0620),
			makeRange16(0x0626, 0x0626),
			makeRange16(0x0628, 0x0628),
			makeRange16(0x062A, 0x062E),
			makeRange16(0x0633, 0x063F),
			makeRange16(0x0641, 0x0647),
			makeRange16(0x0649, 0x064A),
			makeRange16(0x066E, 0x066F),
			makeRange16(0x0678, 0x0687),
			makeRange16(0x069A, 0x06BF),
			makeRange16(0x06C1, 0x06C2),
			makeRange16(0x06CC, 0x06CC),
			makeRange16(0x06CE, 0x06CE),
			makeRange16(0x06D0, 0x06D1),
			makeRange16(0x06FA, 0x06FC),
			makeRange16(0x06FF, 0x06FF),
			makeRange16(0x0712, 0x0714),
			makeRange16(0x071A, 0x071D),
			makeRange16(0x071F, 0x0727),
			makeRange16(0x0729, 0x0729),
			makeRange16(0x072B, 0x072B),
			makeRange16(0x072D, 0x072E),
			makeRange16(0x074E, 0x0758),
			makeRange16(0x075C, 0x076A),
			makeRange16(0x076D, 0x0770),
			makeRange16(0x0772, 0x0772),
			makeRange16(0x0775, 0x0777),
			makeRange16(0x077A, 0x077F),
			makeRange16(0x07CA, 0x07EA),
			makeRange16(0x0841, 0x0845),
			makeRange16(0x0848, 0x0848),
			makeRange16(0x084A, 0x0853),
			makeRange16(0x0855, 0x0855),
			makeRange16(0x08A0, 0x08A9),
			makeRange16(0x08AF, 0x08B0),
			makeRange16(0x08B3, 0x08B4),
			makeRange16(0x1807, 0x1807),
			makeRange16(0x1820, 0x1842),
			makeRange16(0x1843, 0x1843),
			makeRange16(0x1844, 0x1877),
			makeRange16(0x1887, 0x18A8),
			makeRange16(0x18AA, 0x18AA),
			makeRange16(0xA840, 0xA871),
		},
		R32: []unicode.Range32{
			makeRange32(0x10AC0, 0x10AC4),
			makeRange32(0x10AD3, 0x10AD6),
			makeRange32(0x10AD8, 0x10ADC),
			makeRange32(0x10ADE, 0x10AE0),
			makeRange32(0x10AEB, 0x10AEE),
			makeRange32(0x10B80, 0x10B80),
			makeRange32(0x10B82, 0x10B82),
			makeRange32(0x10B86, 0x10B88),
			makeRange32(0x10B8A, 0x10B8B),
			makeRange32(0x10B8D, 0x10B8D),
			makeRange32(0x10B90, 0x10B90),
			makeRange32(0x10BAD, 0x10BAE),
		},
	}

	joiningTableL = unicode.RangeTable{
		R16: []unicode.Range16{
			makeRange16(0xA872, 0xA872),
		},
		R32: []unicode.Range32{
			makeRange32(0x10ACD, 0x10ACD),
			makeRange32(0x10AD7, 0x10AD7),
		},
	}

	joiningTableR = unicode.RangeTable{
		R16: []unicode.Range16{
			makeRange16(0x0622, 0x0625),
			makeRange16(0x0627, 0x0627),
			makeRange16(0x0629, 0x0629),
			makeRange16(0x062F, 0x0632),
			makeRange16(0x0648, 0x0648),
			makeRange16(0x0671, 0x0673),
			makeRange16(0x0675, 0x0677),
			makeRange16(0x0688, 0x0699),
			makeRange16(0x06C0, 0x06C0),
			makeRange16(0x06C3, 0x06CB),
			makeRange16(0x06CD, 0x06CD),
			makeRange16(0x06CF, 0x06CF),
			makeRange16(0x06D2, 0x06D3),
			makeRange16(0x06D5, 0x06D5),
			makeRange16(0x06EE, 0x06EF),
			makeRange16(0x0710, 0x0710),
			makeRange16(0x0715, 0x0719),
			makeRange16(0x071E, 0x071E),
			makeRange16(0x0728, 0x0728),
			makeRange16(0x072A, 0x072A),
			makeRange16(0x072C, 0x072C),
			makeRange16(0x072F, 0x072F),
			makeRange16(0x074D, 0x074D),
			makeRange16(0x0759, 0x075B),
			makeRange16(0x076B, 0x076C),
			makeRange16(0x0771, 0x0771),
			makeRange16(0x0773, 0x0774),
			makeRange16(0x0778, 0x0779),
			makeRange16(0x0840, 0x0840),
			makeRange16(0x0846, 0x0847),
			makeRange16(0x0849, 0x0849),
			makeRange16(0x0854, 0x0854),
			makeRange16(0x08AA, 0x08AC),
			makeRange16(0x08AE, 0x08AE),
			makeRange16(0x08B1, 0x08B2),
		},
		R32: []unicode.Range32{
			makeRange32(0x10AC5, 0x10AC5),
			makeRange32(0x10AC7, 0x10AC7),
			makeRange32(0x10AC9, 0x10ACA),
			makeRange32(0x10ACE, 0x10AD2),
			makeRange32(0x10ADD, 0x10ADD),
			makeRange32(0x10AE1, 0x10AE1),
			makeRange32(0x10AE4, 0x10AE4),
			makeRange32(0x10AEF, 0x10AEF),
			makeRange32(0x10B81, 0x10B81),
			makeRange32(0x10B83, 0x10B85),
			makeRange32(0x10B89, 0x10B89),
			makeRange32(0x10B8C, 0x10B8C),
			makeRange32(0x10B8E, 0x10B8F),
			makeRange32(0x10B91, 0x10B91),
			makeRange32(0x10BA9, 0x10BAC),
		},
	}

	joiningTableT = unicode.RangeTable{
		R16: []unicode.Range16{
			makeRange16(0x00AD, 0x00AD),
			makeRange16(0x0300, 0x036F),
			makeRange16(0x0483, 0x0487),
			makeRange16(0x0488, 0x0489),
			makeRange16(0x0591, 0x05BD),
			makeRange16(0x05BF, 0x05BF),
			makeRange16(0x05C1, 0x05C2),
			makeRange16(0x05C4, 0x05C5),
			makeRange16(0x05C7, 0x05C7),
			makeRange16(0x0610, 0x061A),
			makeRange16(0x061C, 0x061C),
			makeRange16(0x064B, 0x065F),
			makeRange16(0x0670, 0x0670),
			makeRange16(0x06D6, 0x06DC),
			makeRange16(0x06DF, 0x06E4),
			makeRange16(0x06E7, 0x06E8),
			makeRange16(0x06EA, 0x06ED),
			makeRange16(0x070F, 0x070F),
			makeRange16(0x0711, 0x0711),
			makeRange16(0x0730, 0x074A),
			makeRange16(0x07A6, 0x07B0),
			makeRange16(0x07EB, 0x07F3),
			makeRange16(0x0816, 0x0819),
			makeRange16(0x081B, 0x0823),
			makeRange16(0x0825, 0x0827),
			makeRange16(0x0829, 0x082D),
			makeRange16(0x0859, 0x085B),
			makeRange16(0x08E3, 0x0902),
			makeRange16(0x093A, 0x093A),
			makeRange16(0x093C, 0x093C),
			makeRange16(0x0941, 0x0948),
			makeRange16(0x094D, 0x094D),
			makeRange16(0x0951, 0x0957),
			makeRange16(0x0962, 0x0963),
			makeRange16(0x0981, 0x0981),
			makeRange16(0x09BC, 0x09BC),
			makeRange16(0x09C1, 0x09C4),
			makeRange16(0x09CD, 0x09CD),
			makeRange16(0x09E2, 0x09E3),
			makeRange16(0x0A01, 0x0A02),
			makeRange16(0x0A3C, 0x0A3C),
			makeRange16(0x0A41, 0x0A42),
			makeRange16(0x0A47, 0x0A48),
			makeRange16(0x0A4B, 0x0A4D),
			makeRange16(0x0A51, 0x0A51),
			makeRange16(0x0A70, 0x0A71),
			makeRange16(0x0A75, 0x0A75),
			makeRange16(0x0A81, 0x0A82),
			makeRange16(0x0ABC, 0x0ABC),
			makeRange16(0x0AC1, 0x0AC5),
			makeRange16(0x0AC7, 0x0AC8),
			makeRange16(0x0ACD, 0x0ACD),
			makeRange16(0x0AE2, 0x0AE3),
			makeRange16(0x0B01, 0x0B01),
			makeRange16(0x0B3C, 0x0B3C),
			makeRange16(0x0B3F, 0x0B3F),
			makeRange16(0x0B41, 0x0B44),
			makeRange16(0x0B4D, 0x0B4D),
			makeRange16(0x0B56, 0x0B56),
			makeRange16(0x0B62, 0x0B63),
			makeRange16(0x0B82, 0x0B82),
			makeRange16(0x0BC0, 0x0BC0),
			makeRange16(0x0BCD, 0x0BCD),
			makeRange16(0x0C00, 0x0C00),
			makeRange16(0x0C3E, 0x0C40),
			makeRange16(0x0C46, 0x0C48),
			makeRange16(0x0C4A, 0x0C4D),
			makeRange16(0x0C55, 0x0C56),
			makeRange16(0x0C62, 0x0C63),
			makeRange16(0x0C81, 0x0C81),
			makeRange16(0x0CBC, 0x0CBC),
			makeRange16(0x0CBF, 0x0CBF),
			makeRange16(0x0CC6, 0x0CC6),
			makeRange16(0x0CCC, 0x0CCD),
			makeRange16(0x0CE2, 0x0CE3),
			makeRange16(0x0D01, 0x0D01),
			makeRange16(0x0D41, 0x0D44),
			makeRange16(0x0D4D, 0x0D4D),
			makeRange16(0x0D62, 0x0D63),
			makeRange16(0x0DCA, 0x0DCA),
			makeRange16(0x0DD2, 0x0DD4),
			makeRange16(0x0DD6, 0x0DD6),
			makeRange16(0x0E31, 0x0E31),
			makeRange16(0x0E34, 0x0E3A),
			makeRange16(0x0E47, 0x0E4E),
			makeRange16(0x0EB1, 0x0EB1),
			makeRange16(0x0EB4, 0x0EB9),
			makeRange16(0x0EBB, 0x0EBC),
			makeRange16(0x0EC8, 0x0ECD),
			makeRange16(0x0F18, 0x0F19),
			makeRange16(0x0F35, 0x0F35),
			makeRange16(0x0F37, 0x0F37),
			makeRange16(0x0F39, 0x0F39),
			makeRange16(0x0F71, 0x0F7E),
			makeRange16(0x0F80, 0x0F84),
			makeRange16(0x0F86, 0x0F87),
			makeRange16(0x0F8D, 0x0F97),
			makeRange16(0x0F99, 0x0FBC),
			makeRange16(0x0FC6, 0x0FC6),
			makeRange16(0x102D, 0x1030),
			makeRange16(0x1032, 0x1037),
			makeRange16(0x1039, 0x103A),
			makeRange16(0x103D, 0x103E),
			makeRange16(0x1058, 0x1059),
			makeRange16(0x105E, 0x1060),
			makeRange16(0x1071, 0x1074),
			makeRange16(0x1082, 0x1082),
			makeRange16(0x1085, 0x1086),
			makeRange16(0x108D, 0x108D),
			makeRange16(0x109D, 0x109D),
			makeRange16(0x135D, 0x135F),
			makeRange16(0x1712, 0x1714),
			makeRange16(0x1732, 0x1734),
			makeRange16(0x1752, 0x1753),
			makeRange16(0x1772, 0x1773),
			makeRange16(0x17B4, 0x17B5),
			makeRange16(0x17B7, 0x17BD),
			makeRange16(0x17C6, 0x17C6),
			makeRange16(0x17C9, 0x17D3),
			makeRange16(0x17DD, 0x17DD),
			makeRange16(0x180B, 0x180D),
			makeRange16(0x18A9, 0x18A9),
			makeRange16(0x1920, 0x1922),
			makeRange16(0x1927, 0x1928),
			makeRange16(0x1932, 0x1932),
			makeRange16(0x1939, 0x193B),
			makeRange16(0x1A17, 0x1A18),
			makeRange16(0x1A1B, 0x1A1B),
			makeRange16(0x1A56, 0x1A56),
			makeRange16(0x1A58, 0x1A5E),
			makeRange16(0x1A60, 0x1A60),
			makeRange16(0x1A62, 0x1A62),
			makeRange16(0x1A65, 0x1A6C),
			makeRange16(0x1A73, 0x1A7C),
			makeRange16(0x1A7F, 0x1A7F),
			makeRange16(0x1AB0, 0x1ABD),
			makeRange16(0x1ABE, 0x1ABE),
			makeRange16(0x1B00, 0x1B03),
			makeRange16(0x1B34, 0x1B34),
			makeRange16(0x1B36, 0x1B3A),
			makeRange16(0x1B3C, 0x1B3C),
			makeRange16(0x1B42, 0x1B42),
			makeRange16(0x1B6B, 0x1B73),
			makeRange16(0x1B80, 0x1B81),
			makeRange16(0x1BA2, 0x1BA5),
			makeRange16(0x1BA8, 0x1BA9),
			makeRange16(0x1BAB, 0x1BAD),
			makeRange16(0x1BE6, 0x1BE6),
			makeRange16(0x1BE8, 0x1BE9),
			makeRange16(0x1BED, 0x1BED),
			makeRange16(0x1BEF, 0x1BF1),
			makeRange16(0x1C2C, 0x1C33),
			makeRange16(0x1C36, 0x1C37),
			makeRange16(0x1CD0, 0x1CD2),
			makeRange16(0x1CD4, 0x1CE0),
			makeRange16(0x1CE2, 0x1CE8),
			makeRange16(0x1CED, 0x1CED),
			makeRange16(0x1CF4, 0x1CF4),
			makeRange16(0x1CF8, 0x1CF9),
			makeRange16(0x1DC0, 0x1DF5),
			makeRange16(0x1DFC, 0x1DFF),
			makeRange16(0x200B, 0x200B),
			makeRange16(0x200E, 0x200F),
			makeRange16(0x202A, 0x202E),
			makeRange16(0x2060, 0x2064),
			makeRange16(0x206A, 0x206F),
			makeRange16(0x20D0, 0x20DC),
			makeRange16(0x20DD, 0x20E0),
			makeRange16(0x20E1, 0x20E1),
			makeRange16(0x20E2, 0x20E4),
			makeRange16(0x20E5, 0x20F0),
			makeRange16(0x2CEF, 0x2CF1),
			makeRange16(0x2D7F, 0x2D7F),
			makeRange16(0x2DE0, 0x2DFF),
			makeRange16(0x302A, 0x302D),
			makeRange16(0x3099, 0x309A),
			makeRange16(0xA66F, 0xA66F),
			makeRange16(0xA670, 0xA672),
			makeRange16(0xA674, 0xA67D),
			makeRange16(0xA69E, 0xA69F),
			makeRange16(0xA6F0, 0xA6F1),
			makeRange16(0xA802, 0xA802),
			makeRange16(0xA806, 0xA806),
			makeRange16(0xA80B, 0xA80B),
			makeRange16(0xA825, 0xA826),
			makeRange16(0xA8C4, 0xA8C4),
			makeRange16(0xA8E0, 0xA8F1),
			makeRange16(0xA926, 0xA92D),
			makeRange16(0xA947, 0xA951),
			makeRange16(0xA980, 0xA982),
			makeRange16(0xA9B3, 0xA9B3),
			makeRange16(0xA9B6, 0xA9B9),
			makeRange16(0xA9BC, 0xA9BC),
			makeRange16(0xA9E5, 0xA9E5),
			makeRange16(0xAA29, 0xAA2E),
			makeRange16(0xAA31, 0xAA32),
			makeRange16(0xAA35, 0xAA36),
			makeRange16(0xAA43, 0xAA43),
			makeRange16(0xAA4C, 0xAA4C),
			makeRange16(0xAA7C, 0xAA7C),
			makeRange16(0xAAB0, 0xAAB0),
			makeRange16(0xAAB2, 0xAAB4),
			makeRange16(0xAAB7, 0xAAB8),
			makeRange16(0xAABE, 0xAABF),
			makeRange16(0xAAC1, 0xAAC1),
			makeRange16(0xAAEC, 0xAAED),
			makeRange16(0xAAF6, 0xAAF6),
			makeRange16(0xABE5, 0xABE5),
			makeRange16(0xABE8, 0xABE8),
			makeRange16(0xABED, 0xABED),
			makeRange16(0xFB1E, 0xFB1E),
			makeRange16(0xFE00, 0xFE0F),
			makeRange16(0xFE20, 0xFE2F),
			makeRange16(0xFEFF, 0xFEFF),
			makeRange16(0xFFF9, 0xFFFB),
		},
		R32: []unicode.Range32{
			makeRange32(0x101FD, 0x101FD),
			makeRange32(0x102E0, 0x102E0),
			makeRange32(0x10376, 0x1037A),
			makeRange32(0x10A01, 0x10A03),
			makeRange32(0x10A05, 0x10A06),
			makeRange32(0x10A0C, 0x10A0F),
			makeRange32(0x10A38, 0x10A3A),
			makeRange32(0x10A3F, 0x10A3F),
			makeRange32(0x10AE5, 0x10AE6),
			makeRange32(0x11001, 0x11001),
			makeRange32(0x11038, 0x11046),
			makeRange32(0x1107F, 0x11081),
			makeRange32(0x110B3, 0x110B6),
			makeRange32(0x110B9, 0x110BA),
			makeRange32(0x110BD, 0x110BD),
			makeRange32(0x11100, 0x11102),
			makeRange32(0x11127, 0x1112B),
			makeRange32(0x1112D, 0x11134),
			makeRange32(0x11173, 0x11173),
			makeRange32(0x11180, 0x11181),
			makeRange32(0x111B6, 0x111BE),
			makeRange32(0x111CA, 0x111CC),
			makeRange32(0x1122F, 0x11231),
			makeRange32(0x11234, 0x11234),
			makeRange32(0x11236, 0x11237),
			makeRange32(0x112DF, 0x112DF),
			makeRange32(0x112E3, 0x112EA),
			makeRange32(0x11300, 0x11301),
			makeRange32(0x1133C, 0x1133C),
			makeRange32(0x11340, 0x11340),
			makeRange32(0x11366, 0x1136C),
			makeRange32(0x11370, 0x11374),
			makeRange32(0x114B3, 0x114B8),
			makeRange32(0x114BA, 0x114BA),
			makeRange32(0x114BF, 0x114C0),
			makeRange32(0x114C2, 0x114C3),
			makeRange32(0x115B2, 0x115B5),
			makeRange32(0x115BC, 0x115BD),
			makeRange32(0x115BF, 0x115C0),
			makeRange32(0x115DC, 0x115DD),
			makeRange32(0x11633, 0x1163A),
			makeRange32(0x1163D, 0x1163D),
			makeRange32(0x1163F, 0x11640),
			makeRange32(0x116AB, 0x116AB),
			makeRange32(0x116AD, 0x116AD),
			makeRange32(0x116B0, 0x116B5),
			makeRange32(0x116B7, 0x116B7),
			makeRange32(0x1171D, 0x1171F),
			makeRange32(0x11722, 0x11725),
			makeRange32(0x11727, 0x1172B),
			makeRange32(0x16AF0, 0x16AF4),
			makeRange32(0x16B30, 0x16B36),
			makeRange32(0x16F8F, 0x16F92),
			makeRange32(0x1BC9D, 0x1BC9E),
			makeRange32(0x1BCA0, 0x1BCA3),
			makeRange32(0x1D167, 0x1D169),
			makeRange32(0x1D173, 0x1D17A),
			makeRange32(0x1D17B, 0x1D182),
			makeRange32(0x1D185, 0x1D18B),
			makeRange32(0x1D1AA, 0x1D1AD),
			makeRange32(0x1D242, 0x1D244),
			makeRange32(0x1DA00, 0x1DA36),
			makeRange32(0x1DA3B, 0x1DA6C),
			makeRange32(0x1DA75, 0x1DA75),
			makeRange32(0x1DA84, 0x1DA84),
			makeRange32(0x1DA9B, 0x1DA9F),
			makeRange32(0x1DAA1, 0x1DAAF),
			makeRange32(0x1E8D0, 0x1E8D6),
			makeRange32(0xE0001, 0xE0001),
			makeRange32(0xE0020, 0xE007F),
			makeRange32(0xE0100, 0xE01EF),
		},
	}
)

// ------------- end cut ------------------------

var (
	viramaCombiningClass = unicode.RangeTable{
		R16: []unicode.Range16{
			singleCP16(0x094D),
			singleCP16(0x09CD),
			singleCP16(0x0A4D),
			singleCP16(0x0ACD),
			singleCP16(0x0B4D),
			singleCP16(0x0BCD),
			singleCP16(0x0C4D),
			singleCP16(0x0CCD),
			singleCP16(0x0D4D),
			singleCP16(0x0DCA),
			singleCP16(0x0E3A),
			singleCP16(0x0F84),
			singleCP16(0x1039),
			singleCP16(0x103A),
			singleCP16(0x1714),
			singleCP16(0x1734),
			singleCP16(0x17D2),
			singleCP16(0x1A60),
			singleCP16(0x1B44),
			singleCP16(0x1BAA),
			singleCP16(0x1BAB),
			singleCP16(0x1BF2),
			singleCP16(0x1BF3),
			singleCP16(0x2D7F),
			singleCP16(0xA806),
			singleCP16(0xA8C4),
			singleCP16(0xA953),
			singleCP16(0xA9C0),
			singleCP16(0xAAF6),
			singleCP16(0xABED),
		},
		R32: []unicode.Range32{
			singleCP32(0x10A3F),
			singleCP32(0x11046),
			singleCP32(0x1107F),
			singleCP32(0x110B9),
			singleCP32(0x11133),
			singleCP32(0x11134),
			singleCP32(0x111C0),
			singleCP32(0x11235),
			singleCP32(0x112EA),
			singleCP32(0x1134D),
			singleCP32(0x114C2),
			singleCP32(0x115BF),
			singleCP32(0x1163F),
			singleCP32(0x116B6),
			singleCP32(0x1172B),
		},
	}
)

// JoinType is The unicode joining types
type JoinType int

// The unicode joining types
const (
	JoinU JoinType = iota // non-joining
	JoinR                 // Right-joining
	JoinL                 // left-joining
	JoinD                 // dual-joining
	JoinC                 // join-causing
	JoinT                 // transparent
)

// GetJoinType takes a rune and returns the joining class for it
func GetJoinType(r rune) JoinType {
	switch {
	case unicode.In(r, &joiningTableR):
		return JoinR
	case unicode.In(r, &joiningTableL):
		return JoinL
	case unicode.In(r, &joiningTableD):
		return JoinD
	case unicode.In(r, &joiningTableC):
		return JoinC
	case unicode.In(r, &joiningTableT):
		return JoinT
	default:
		return JoinU
	}
}
